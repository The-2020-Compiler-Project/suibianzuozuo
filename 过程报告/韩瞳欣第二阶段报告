确定了一个可执行的的词法分析器，用string类型的变量存放整个token串，进一步在语法分析器中对这个string类型
的变量进行操作，词法分析已没有问题，代码如下：
#include <iostream>
#include <vector> 
#include <string> 
#include <fstream> 
using namespace std;
#define max_num 30

string  key[14] = { "main","int","char","const","void",
                    "if","else","switch","case","default",
                    "for","printf","scanf","return" };//关键字
string  symbol[22] = {   "=","+","-","*","/",
                         "<","<=",">",">=","!=",
                         "==","(",")","[","]",
                         "{","}",",",":",";"
                         "'","\""};//界符
string iT[30];//标识符
double CT[30];//常数
string cT[30];//字符
string sT[30];//字符串

//判断是不是字母
bool isChar(char ch)
{
    if ((ch >= 'a' && ch <= 'z') || ch >= 'A' && ch <= 'Z')
        return true;
    else return false;
}

//判断是不是数字 
bool isNum(char ch)
{
    if (ch >= '0' && ch <= '9')
        return true;
    else
        return false;
}

//判断是不是关键字
int isKey(string a, string& z)
{
    int flag = -1;
    string c;
    for (int i = 0; i < 20; i++)
    {
        if (a == key[i])
        {
            z.append("<key ");
            c = to_string(i);
            c = to_string(i);
            z.append(c);
            z.append(">");
            return i;
        }

    }
    return flag;
}

//初始化各个表
void init_()
{
    int i;
    for (i = 0; i < max_num; i++)
    {
        iT[i] = "";//标识符
    }
    for (i = 0; i < max_num; i++)
    {
        CT[i] = -3333;//常数
    }
    for (i = 0; i < max_num; i++)
    {
        cT[i] = "";//字符
    }
    for (i = 0; i < max_num; i++)
    {
        sT[i] = "";//字符串
    }
}

//查、写入标识符表
void write_iT(string a, string& z)
{
    int i, flag = 0;
    string c;//将i转为string类型
    for (i = 0; i < max_num; i++)//查表
    {
        if (iT[i] != "")
        {
            if (iT[i] == a)
            {
                flag = 1;
                break;
            }
        }
        else break;
    }
    if (!flag)//不在表内，填表
    {
        for (; i < max_num; i++)//i正好指向末尾
        {
            if (iT[i] == "")
            {
                iT[i] = a;
                break;
            }
        }
    }
    z.append("<iT ");
    c = to_string(i);
    z.append(c);
    z.append(">");
}

//查、写入常数表
void write_CT(double a, string& z)
{
    int i, flag = 0;
    string c;
    for (i = 0; i < max_num; i++)//查表
    {
        if (CT[i] != -3333)
        {
            if (CT[i] == a)
            {
                flag = 1;
                break;
            }
        }
        else break;
    }

    if (!flag)//填表
        for (; i < max_num; i++)
        {
            if (CT[i] == -3333)
            {
                CT[i] = a;
                break;
            }
        }
    z.append("<CT ");
    c = to_string(i);
    z.append(c);
    z.append(">");
}

//查、写入字符表
void write_cT(char a, string& z)
{
    int i, flag = 0;
    string c;
    string b;
    b = a;
    for (i = 0; i < max_num; i++)//查表
    {
        if (cT[i] != "")
        {
            if (cT[i] == b)
            {
                flag = 1;
                break;
            }
        }
        else break;
    }

    if (!flag)//填表
        for (; i < max_num; i++)
        {
            if (cT[i] == "")
            {
                cT[i] = a;
                break;
            }
        }
    z.append("<cT ");
    c = to_string(i);
    z.append(c);
    z.append(">");
}

//查、写入字符串表
void write_sT(string a, string& z)
{
    int i, flag = 0;
    string c;
    for (i = 0; i < max_num; i++)//查表
    {
        if (sT[i] != "")
        {
            if (sT[i] == a)
            {
                flag = 1;
                break;
            }
        }
        else break;
    }

    if (!flag)//填表
        for (; i < max_num; i++)
        {
            if (sT[i] == "")
            {
                sT[i] = a;
                break;
            }
        }
    z.append("<sT ");
    c = to_string(i);
    z.append(c);
    z.append(">");
}

//输出界符token序列
void token_symbol(int i, string& z)
{
    string c;
    z.append("<symbol ");
    c = to_string(i);
    c = to_string(i);
    z.append(c);
    z.append(">");
}

//扫描目标文件，查填表并输出token序列
void scanner(string a, string& token)
{
    int i, size = a.size();

    for (i = 0; i < size; i++)
    {
        string word;//记录单词
        if (isChar(a[i]))//开头是字母，判断关键字、标识符
        {
            while ((isChar(a[i])) || (isNum(a[i])))
            {
                word += a[i];   
                i++;
            }
            int flag;
            flag = isKey(word, token);

            if (flag == -1)
            {
                write_iT(word, token);
            }
            i--;
        }

        else if (isNum(a[i]))//开头是数字，常数表
        {
            while (isNum(a[i]))
            {
                word += a[i];
                i++;
            }
            if (a[i] == '.')
            {
                word += a[i];
                i++;
                while (isNum(a[i]))
                {
                    word += a[i];
                    i++;
                }
            }
            i--;
            double c = stod(word);//将string转为double
            write_CT(c, token);//查填常数表并输出token
        }

        else if (a[i] == '"')//开头是“，查填字符串表
        {
            token_symbol(21, token);
            i++;
            while (a[i] != '"')
            {
                word += a[i];
                i++;
            }
            write_sT(word, token);
            token_symbol(21, token);
        }

        else if (a[i] == '\'')//开头是'，查填字符表
        {
            token_symbol(18, token);
            i++;
            char b = a[i];
            i++;
            write_cT(b, token);
            token_symbol(18, token);
        }

        else//界符表
        {
            switch (a[i])//无争议界符直接输出
            {
            case '+': token_symbol(1, token); break;
            case '-': token_symbol(2, token); break;
            case '*': token_symbol(3, token); break;
            case '/': token_symbol(4, token); break;
            case '(': token_symbol(11, token); break;
            case ')': token_symbol(12, token); break;
            case '[': token_symbol(13, token); break;
            case ']': token_symbol(14, token); break;
            case '{': token_symbol(15, token); break;
            case '}': token_symbol(16, token); break;
            case ',': token_symbol(17, token); break;
            case ':': token_symbol(18, token); break;
            case ';': token_symbol(19, token); break;
            }

            if (a[i] == '<')//有争议界符进行讨论
            {
                i++;//读下一个字符
                if (a[i] == '=')
                    token_symbol(6, token);
                else
                {
                    token_symbol(5, token);
                    i--;//退回上个字符，防止下个循环跳过一个字符
                }
            }
            else if (a[i] == '>')
            {
                i++;
                if (a[i] == '=')
                    token_symbol(8, token);
                else
                {
                    token_symbol(7, token);
                    i--;//退回上个字符，防止下个循环跳过一个字符
                }
            }
            else if (a[i] == '=')
            {
                i++;
                if (a[i] == '=')
                    token_symbol(10, token);
                else
                {
                    token_symbol(0, token);
                    i--;//退回上个字符，防止下个循环跳过一个字符
                }
            }
        }
    }
}

//将文件内容读到string中
string read_file(string m)
{
    ifstream infile;
    string file;
    cout << "输入文件路径\n";
    cin >> file;
    infile.open(file, ios::in);//打开文件
    if (!infile.is_open())
        cout << "file open error";

    string c;
    char a;
    infile >> noskipws;//读入空格和\n
    while (infile >> a)
    {
        c = a;
        m.append(c);
    }
    infile.close();
    return m;
}

// int main()
// {
//     init_();
//     string m;
//     string token;
//     m = read_file(m);
//     scanner(m, token);              //string类型的token存放token
//     cout << token;
//     return 0;
// }


运行示例如下:
 
其中sb.txt文档中的文本内容为int main,在关键字表中的位置为为第二位和第一位，对应数组标号为1和0，分析结果正确。

语法分析器的核心思想和函数已经实现，对从词法分析得到的每个token进行分析，核心函数为next_tk和erase_tk,功能分别为读取下一个token和删除已经分析过的token，代码如下
#include <iostream>
#include <cmath>
#include <cstring>
#include <fstream>

#include "cifa_end.cpp"

using namespace std;

void next_tk(string& token, string& tk_id, string& tk_num, int k)
{
    tk_id.clear();
    tk_num.clear();
    int i = 0, j;
    //i=1越过<
    if (token.size() == 0)
    {
        cout << "token已读完";
    }
    else
    {
        for (j = 1; j != k; )
        {
            for (; token[i] != '>'; i++);
            i++;
            j++;
        }
        i++;
        //当j=k时读第k个token
        for (; token[i] != ' '; i++)
        {
            tk_id.push_back(token[i]);
        }
        for (i++; token[i] != '>'; i++) tk_num.push_back(token[i]);
    }

}

void erase_tk(string& token)        //删除string中已经分析过的token
{
    int i;
    int size = token.size();
    if (size == 0);
    else {
        for (i = 0; token[i] != '>'; i++);
        token.erase(0, i + 1);
    }
}

//<程序>   <类型> main <分程序>
void program(string& token)
{
    void type(string& token);   //类型
    void sub_program(string& token);    //分程序
    string tk_id,tk_num;
    type(token);
    next_tk(token,tk_id,tk_num,1);
    if(tk_id == "key" && tk_num == "0")
    {
        erase_tk(token);
        sub_program(token);
        next_tk(token,tk_id,tk_num,1);
    }
}

int main()
{
    string s,token;         //token存放整个token序列
    string tk_id,tk_num;    //token的类型和在数组中的位置
    s = read_file(s);       
    scanner(s,token);       //扫描目标文件，查填表并把token序列送入token  string
    cout<<"token: "<<token<<endl<<endl<<endl;
    next_tk(token,tk_id,tk_num,2);
    program(token);
}
子程序递归分析还未写完，暂无运行结果
